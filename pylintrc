[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Profiled execution.
profile=no

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore=CVS

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=


[MESSAGES CONTROL]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time. See also the "--disable" option for examples.
enable=python3

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"


disable=C0103, # [invalid-name] Used when the name doesn't match the regular
               # expression associated to its type (constant, variable, class...).

  C0111, # [missing-docstring] Used when a module, function, class or method has no docstring.
         # Some special methods like __init__ doesn't necessary require a docstring.

  E0102, # [function-redefined] Used when a function / class / method is redefined.

  E0202, # [method-hidden] A defined attribute hides this method

  E0213, # [no-self-argument] Used when a method has an attribute different the "self" as first argument.
         # This is considered as an error since this is a so common convention that you shouldn't break it!

  E0401, # [import-error] Used when pylint has been unable to import a module.

  E0611, # [no-name-in-module] Used when a name cannot be found in a module.

  E1003, # [bad-super-call] Used when another argument than the current class is given as first argument
         # of the super builtin.

  E1101, # [no-member] Used when a variable is accessed for an unexistent member.

  E1102, # [not-callable] Used when an object being called has been inferred to a non callable object

  E1120, # [no-value-for-parameter] Used when a function call passes too few arguments.

  E1123, # [unexpected-keyword-arg] Used when a function call passes a keyword argument that doesn't correspond
         # to one of the function's parameter names.

  E1133, # [not-an-iterable] Used when a non-iterable value is used in place where iterable is expected

  I1101, # [c-extension-no-member] Used when a variable is accessed for non-existent member of C extension.
         # Due to unavailability of source static analysis is impossible, but it may be performed by introspecting
         # living objects in run-time.
  R0401, # [cyclic-import]
  R0801, # [duplicate-code]
  R0201, # [no-self-use] Used when a method doesn't use its bound instance, and so could be written as a function.

  R0901, # [too-many-ancestors] Used when class has too many parent classes, try to reduce this to get a simpler
         # (and so easier to use) class.

  R0902, # [too-many-instance-attributes] Used when class has too many instance attributes, try to reduce
         # this to get a simpler (and so easier to use) class.

  R0903, # [too-few-public-methods] Used when class has too few public methods, so be sure it's really worth it.

  R0912, # [too-many-branches] Used when a function or method has too many branches, making it hard to follow.

  R0913, # [too-many-arguments] Used when a function or method takes too many arguments.

  R0914, # [too-many-locals] Used when a function or method has too many local variables.

  R1705, # [no-else-return] Used in order to highlight an unnecessary block of code following an if containing
         # a return statement. As such, it will warn when it encounters an else following a chain of ifs,
         # all of them containing a return statement.

  R1710, # [inconsistent-return-statements] Either all return statements in a function should return an expression,
         # or none of them should.

  W0201, # [attribute-defined-outside-init] Used when an instance attribute is defined outside the __init__ method.

  W0211, # [bad-staticmethod-argument] Used when a static method has "self" or a value specified
         # in valid-classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.

  W0212, # [protected-access] Used when a protected member (i.e. class member with a name beginning with an underscore)
         # is access outside the class or a descendant of the class where it's defined.

  W0221, # [arguments-differ] Used when a method has a different number of arguments than in the implemented
         # interface or in an overridden method.

  W0223, # [abstract-method] Used when an abstract method (i.e. raise NotImplementedError) is not overridden
         # in concrete class.

  W0231, # [super-init-not-called] Used when an ancestor class method has an __init__ method
         # which is not called by a derived class.

  W0232, # [no-init] Used when a class has no __init__ method, neither its parent classes.

  W0235, # [useless-super-delegation] Used whenever we can detect that an overridden method is useless,
         # relying on super() delegation to do the same thing as another method from the MRO.

  W0404, # [reimported] Used when a module is reimported multiple times.

  W0511, # [fixme] Used when a warning note as FIXME or XXX is detected.

  W0603, # [global-statement] Used when you use the "global" statement to update a global variable.
         # Pylint just try to discourage this usage. That doesn't mean you cannot use it !

  W0611, # [unused-import] Used when an imported module or variable is not used.

  W0612, # [unused-variable] Used when a variable is defined but not used.

  W0613, # [unused-argument] Used when a function or method argument is not used.

  W0621, # [redefined-outer-name] Used when a variable's name hide a name defined in the outer scope.

  W0622, # [redefined-builtin] Used when a variable or function override a built-in.

  W0703, # [broad-except] Used when an except catches a too general exception, possibly burying unrelated errors.

  W0715, # [raising-format-tuple] Exception arguments suggest string formatting might be intended

  W1113, # [keyword-arg-before-vararg] When defining a keyword argument before variable positional arguments,
         # one can end up in having multiple values passed for the aforementioned parameter
         # in case the method is called with keyword arguments.

  W1201, # [logging-not-lazy] Used when a logging statement has a call form of
         # "logging.<logging method>(format_string % (format_args...))". Such calls should leave string interpolation
         # to the logging method itself and be written "logging.<logging method>(format_string, format_args...)"
         # so that the program may avoid incurring the cost of the interpolation in those cases
         # in which no message will be logged. For more, see http://www.python.org/dev/peps/pep-0282/.

  W1202, # [logging-format-interpolation] Used when a logging statement has a call form
         # of "logging.<logging method>(format_string.format(format_args...))". Such calls should
         # use % formatting instead, but leave interpolation to the logging function by passing the parameters as arguments.

  W1401, # [anomalous-backslash-in-string] Used when a backslash is in a literal string but not as an escape.

  W1618 # [no-absolute-import]

[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=text

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
files-output=no

# Tells whether to display a full report or only the messages
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Add a comment according to your evaluation note. This is used by the global
# evaluation report (RP0004).
comment=no

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
msg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}


[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=150

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no

# List of optional constructs for which whitespace checking is disabled
no-space-check=trailing-comma,dict-separator

# Maximum number of lines in a module
# INCREASED FROM 1000 TO 5000
max-module-lines=5000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '


[BASIC]

# Required attributes for module, separated by a comma
required-attributes=

# List of builtins function names that should not be used, separated by a comma
bad-functions=map,filter,apply,input

# Regular expression which should only match correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression which should only match correct module level names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression which should only match correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Regular expression which should only match correct function names
function-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct method names
method-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct instance attribute names
attr-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct argument names
argument-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct variable names
variable-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct attribute names in class
# bodies
class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=__.*__

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes=SQLObject

# When zope mode is activated, add a predefined set of Zope acquired attributes
# to generated-members.
zope=no

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed. Python regular
# expressions are accepted.
generated-members=REQUEST,acl_users,aq_parent


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching the beginning of the name of dummy variables
# (i.e. not used).
dummy-variables-rgx=_$|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=


[CLASSES]

# List of interface methods to ignore, separated by a comma. This is used for
# instance to not check methods defines in Zope's Interface base class.
ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs


[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=


[DESIGN]

# Maximum number of arguments for function / method
max-args=5

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of return / yield for function / method body
# INCREASED FROM 6 TO 8
max-returns=8

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of statements in function / method body
# INCREASED FROM 50 TO 80
max-statements=80

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Minimum number of public methods for a class (see R0903).
min-public-methods=2

# Maximum number of public methods for a class (see R0904).
# INCREASED FROM 20 TO 35
max-public-methods=35


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=Exception


